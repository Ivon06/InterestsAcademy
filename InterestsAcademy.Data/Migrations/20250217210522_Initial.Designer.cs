// <auto-generated />
using System;
using InterestsAcademy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterestsAcademy.Data.Migrations
{
    [DbContext(typeof(InterestsAcademyDbContext))]
    [Migration("20250217210522_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InterestsAcademy.Data.Models.Activity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.ActivityStudent", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityStudents");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArticlePictureURLs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("Description");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoomId");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = "e6bb13af-fe1e-4276-b301-1bffe7f8c8fc",
                            Description = "Този курс обхваща основите на биологията – от клетките и ДНК до екосистемите и еволюцията.",
                            Duration = "2 месеца",
                            IsActive = true,
                            IsApproved = true,
                            Name = "Биология",
                            RoomId = "64ae1f9e-bc59-4356-b74e-887f08425106",
                            TeacherId = "2644afb5-f916-4b3f-b451-9ff86c881de3"
                        });
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.GivenThing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialBaseItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GiverId");

                    b.HasIndex("MaterialBaseItemId");

                    b.ToTable("GivenThings");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Giver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GiverType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Givers");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.MaterialBaseItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NeededQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MaterialBaseItems");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Request", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = "129bb432-fbbb-41eb-812a-5091978f7c7c",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Мултифункционална зала"
                        },
                        new
                        {
                            Id = "c65aaef4-87ce-4e35-a60f-0b5d8f94171f",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Музикално студио"
                        },
                        new
                        {
                            Id = "cfdf8b3e-f216-4449-80c9-66e149c6c914",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство \"Малки изследователи\""
                        },
                        new
                        {
                            Id = "6ec09e3b-ddd4-47ff-a3b6-6ad9278bfdb4",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Работилница"
                        },
                        new
                        {
                            Id = "38937a33-bffe-434f-bb3d-6fe6397e4538",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Физкултурен салон"
                        },
                        new
                        {
                            Id = "19ee7987-e4ae-4af3-bc50-7fa27adcc4c8",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Конферентна зала"
                        },
                        new
                        {
                            Id = "09fb0433-8eb8-436a-b9d3-8fb63b03bc9c",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Библиотека"
                        },
                        new
                        {
                            Id = "cc9a27d1-e7b6-48c8-9957-33ab64fe8b50",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Физика и астрономия"
                        },
                        new
                        {
                            Id = "c29aee18-f67c-4058-90dc-c2462832441a",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство \"Роботика и програмиране\""
                        },
                        new
                        {
                            Id = "684c0183-d908-4b3e-8cc3-b2909f6ff92f",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство за Археология"
                        },
                        new
                        {
                            Id = "64ae1f9e-bc59-4356-b74e-887f08425106",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Лаборатория"
                        },
                        new
                        {
                            Id = "89dcf285-c8e5-45b3-b5d3-19ad1818134f",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Младежки клуб по видеозаснемане"
                        },
                        new
                        {
                            Id = "7e2f2252-bb8b-4716-a702-d891e77a7b4a",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство за спорт на открито"
                        },
                        new
                        {
                            Id = "1b39e8a3-f267-4cb3-ba7a-6afc81249714",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Еко стая"
                        },
                        new
                        {
                            Id = "1e81f8b2-a46b-498d-ae78-d7ced7775d1e",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Градина за биоземеделие"
                        },
                        new
                        {
                            Id = "6863ab57-1613-43ab-9770-c301cd77f614",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Дейности извън Академията - ориентиране в планината, конна езда, походи"
                        });
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.SleepingRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CountOfBed")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SleepingRooms");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SleepingRoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SleepingRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "12d4e897-5f33-4689-a74c-f9ede675e497",
                            UserId = "080a469a-b5a2-44cc-a660-eea8e6fd05a5"
                        });
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.StudentCourse", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentsCourses");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "2644afb5-f916-4b3f-b451-9ff86c881de3",
                            UserId = "93418f37-da3b-4c78-b0ae-8f0022b09681"
                        });
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<string>("City")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "080a469a-b5a2-44cc-a660-eea8e6fd05a5",
                            AccessFailedCount = 0,
                            Address = "ул. Ал. Стамболийски 30 ет.3 ап.11",
                            BirthDate = new DateTime(2008, 4, 12, 13, 24, 0, 0, DateTimeKind.Unspecified),
                            City = "Казанлък",
                            ConcurrencyStamp = "b5cb7eee-99ae-45e1-a249-f87665498c23",
                            Country = "България",
                            Email = "petarpetrov@abv.bg",
                            EmailConfirmed = false,
                            Gender = "Мъж",
                            IsActive = true,
                            IsApproved = true,
                            LockoutEnabled = false,
                            Name = "Петър Петров",
                            NormalizedEmail = "PETARPETROV@ABV.BG",
                            NormalizedUserName = "PETAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEFYUXFyT65mNnrsP4a7IzHoPsef9GzYjOJoni1CDMx5MmoypJtiotXTEcwqNswO2pQ==",
                            PhoneNumber = "0885763826",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/ddriqreo7/image/upload/v1697607303/projectImages/xbhwflepot9qpwmiiq6u.jpg",
                            RegisteredOn = new DateTime(2025, 2, 17, 21, 5, 19, 946, DateTimeKind.Utc).AddTicks(7320),
                            SecurityStamp = "7dc5437d-655b-4a73-8d63-57d85b45d5a7",
                            TwoFactorEnabled = false,
                            UserName = "petar"
                        },
                        new
                        {
                            Id = "93418f37-da3b-4c78-b0ae-8f0022b09681",
                            AccessFailedCount = 0,
                            Address = "ул.Възраждане 6 ет.2 ап.8",
                            BirthDate = new DateTime(1968, 2, 8, 11, 20, 0, 0, DateTimeKind.Unspecified),
                            City = "Казанлък",
                            ConcurrencyStamp = "83169ab6-48c1-4668-944c-1e3915cf5bf4",
                            Country = "България",
                            Email = "georgidimitrov@abv.bg",
                            EmailConfirmed = false,
                            Gender = "Мъж",
                            IsActive = true,
                            IsApproved = true,
                            LockoutEnabled = false,
                            Name = "Георги Димитров",
                            NormalizedEmail = "GEORGIDIMITROV@ABV.BG",
                            NormalizedUserName = "GEORGI",
                            PasswordHash = "AQAAAAIAAYagAAAAECwPjF1HtxaGUyL8HO8bluAFz8kCCwAcrwbKJhN9uYPnuM8KQK9oqmcY8NeQxvQMtg==",
                            PhoneNumber = "0885789826",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/ddriqreo7/image/upload/v1697608565/projectImages/mvorrsshjbw1e8bzfzgq.jpg",
                            RegisteredOn = new DateTime(2025, 2, 17, 21, 5, 20, 146, DateTimeKind.Utc).AddTicks(1627),
                            SecurityStamp = "6257c14a-acb8-44de-99a2-a093dc367db6",
                            TwoFactorEnabled = false,
                            UserName = "georgi"
                        },
                        new
                        {
                            Id = "20dcf707-dfd9-4aae-b8c3-f3b9844e09d8",
                            AccessFailedCount = 0,
                            Address = "ул. Незабравка 3",
                            BirthDate = new DateTime(2015, 7, 18, 11, 20, 0, 0, DateTimeKind.Unspecified),
                            City = "Енина",
                            ConcurrencyStamp = "c53f72e4-46ef-4341-b61b-d8451ca88734",
                            Country = "България",
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            Gender = "Мъж",
                            IsActive = true,
                            IsApproved = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEP2fkGIvcts48/JV8hdZCk5oNYSGXYZH8mqWJAiEOO2VL7JYW4S+x3Sc43VpJDdM3g==",
                            PhoneNumber = "0889864842",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/ddriqreo7/image/upload/v1697617373/projectImages/pyb6v86l6myou9h1sxca.jpg",
                            RegisteredOn = new DateTime(2025, 2, 17, 21, 5, 20, 286, DateTimeKind.Utc).AddTicks(1307),
                            SecurityStamp = "e69d3193-5b65-4e05-b17b-8c60346269a9",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "78374b9b-5158-4aff-8626-d088a02d79e1",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "835c8458-e8b7-493f-9c13-67bfcd7316a3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8duisjak-e8o7-8uu5-9c13-543e65731jh3",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "78wijd768-7255-4iwf-9o23-6786yet54wa3",
                            Name = "Giver",
                            NormalizedName = "GIVER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "93418f37-da3b-4c78-b0ae-8f0022b09681",
                            RoleId = "78374b9b-5158-4aff-8626-d088a02d79e1"
                        },
                        new
                        {
                            UserId = "20dcf707-dfd9-4aae-b8c3-f3b9844e09d8",
                            RoleId = "835c8458-e8b7-493f-9c13-67bfcd7316a3"
                        },
                        new
                        {
                            UserId = "080a469a-b5a2-44cc-a660-eea8e6fd05a5",
                            RoleId = "8duisjak-e8o7-8uu5-9c13-543e65731jh3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Activity", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Course", "Course")
                        .WithMany("Activities")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.ActivityStudent", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Activity", "Activity")
                        .WithMany("ActivityStudents")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Student", "Student")
                        .WithMany("ActivitiesStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Article", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Course", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Room", "Room")
                        .WithMany("Courses")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InterestsAcademy.Data.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.GivenThing", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Giver", "Giver")
                        .WithMany("GivenThings")
                        .HasForeignKey("GiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.MaterialBaseItem", null)
                        .WithMany("GivenThings")
                        .HasForeignKey("MaterialBaseItemId");

                    b.Navigation("Giver");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Giver", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Request", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Course", "Course")
                        .WithMany("Requests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Student", "Student")
                        .WithMany("Requests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Teacher", "Teacher")
                        .WithMany("Requests")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Student", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.SleepingRoom", "SleepingRoom")
                        .WithMany("Students")
                        .HasForeignKey("SleepingRoomId");

                    b.HasOne("InterestsAcademy.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SleepingRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.StudentCourse", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Teacher", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Activity", b =>
                {
                    b.Navigation("ActivityStudents");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Course", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Requests");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Giver", b =>
                {
                    b.Navigation("GivenThings");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.MaterialBaseItem", b =>
                {
                    b.Navigation("GivenThings");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Room", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.SleepingRoom", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Student", b =>
                {
                    b.Navigation("ActivitiesStudents");

                    b.Navigation("Requests");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Teacher", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.User", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
