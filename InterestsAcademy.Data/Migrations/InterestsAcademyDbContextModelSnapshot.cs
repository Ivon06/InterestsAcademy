// <auto-generated />
using System;
using InterestsAcademy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterestsAcademy.Data.Migrations
{
    [DbContext(typeof(InterestsAcademyDbContext))]
    partial class InterestsAcademyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InterestsAcademy.Data.Models.Activity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.ActivityStudent", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityStudents");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoomId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.GivenThing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaterialItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GiverId");

                    b.HasIndex("MaterialItemId");

                    b.ToTable("GivenThings");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Giver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GiverType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Givers");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.MaterialBaseItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NeededQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MaterialBaseItems");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Request", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = "8fd131ed-da38-427f-9e06-a775666e0000",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Мултифункционална зала"
                        },
                        new
                        {
                            Id = "b079cae6-1b63-4753-8c53-4acfa9822797",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Музикално студио"
                        },
                        new
                        {
                            Id = "a6bd87fc-9459-4a2b-ac15-426069b0c975",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство \"Малки изследователи\""
                        },
                        new
                        {
                            Id = "d46e79e7-3875-4e83-b274-9430002d435a",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Работилница"
                        },
                        new
                        {
                            Id = "b182b4af-47a3-4d82-a917-dfb78d4a04bf",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Физкултурен салон"
                        },
                        new
                        {
                            Id = "2904ecee-5398-4049-8118-929a50437514",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Конферентна зала"
                        },
                        new
                        {
                            Id = "93113b4a-8598-4815-b318-e1c5f5e7f077",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Библиотека"
                        },
                        new
                        {
                            Id = "1f4dc64a-8d58-44a6-a1f9-0d8a49413be6",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Физика и астрономия"
                        },
                        new
                        {
                            Id = "cb83907a-893e-49ab-b680-63cca2e408b5",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство \"Роботика и програмиране\""
                        },
                        new
                        {
                            Id = "20b34164-715a-42bd-8963-1f5b786c38d3",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство за Археология"
                        },
                        new
                        {
                            Id = "8ab44d36-a00e-4e39-ac9e-4d863cd159a7",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Лаборатория"
                        },
                        new
                        {
                            Id = "1e6cebba-b4e6-48a4-ae32-6336b9bda35e",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Младежки клуб по видеозаснемане"
                        },
                        new
                        {
                            Id = "01e9c2db-9035-4071-8602-f7b768b5a47d",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство за спорт на открито"
                        },
                        new
                        {
                            Id = "fea5e2d5-6854-42df-b7e2-e3d9fa34cf56",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Еко стая"
                        },
                        new
                        {
                            Id = "6e0f6e88-fcc6-4312-b0be-38eb715c9f1f",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Градина за биоземеделие"
                        },
                        new
                        {
                            Id = "f87467af-c6e0-4af1-8e05-390f31f4a35d",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Дейности извън Академията - ориентиране в планината, конна езда, походи"
                        });
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.SleepingRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CountOfBed")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SleepingRooms");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SleepingRoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SleepingRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "2436e6ba-7163-4c01-b6d1-c4ead64ec7c0",
                            UserId = "080a469a-b5a2-44cc-a660-eea8e6fd05a5"
                        });
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.StudentCourse", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentsCourses");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "69d01633-b6d0-410b-b135-3442eef1f8ce",
                            UserId = "93418f37-da3b-4c78-b0ae-8f0022b09681"
                        });
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<string>("City")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "080a469a-b5a2-44cc-a660-eea8e6fd05a5",
                            AccessFailedCount = 0,
                            Address = "ул. Ал. Стамболийски 30 ет.3 ап.11",
                            BirthDate = new DateTime(2008, 4, 12, 13, 24, 0, 0, DateTimeKind.Unspecified),
                            City = "Казанлък",
                            ConcurrencyStamp = "bf5d5bb8-7c8e-415c-9184-d9999e290604",
                            Country = "България",
                            Email = "petarpetrov@abv.bg",
                            EmailConfirmed = false,
                            Gender = "Мъж",
                            IsActive = true,
                            IsApproved = true,
                            LockoutEnabled = false,
                            Name = "Петър Петров",
                            NormalizedEmail = "PETARPETROV@ABV.BG",
                            NormalizedUserName = "PETAR",
                            PasswordHash = "AQAAAAIAAYagAAAAECCV9gV3HPM6Owc7oOu8ZwGsgpDpWPLcCeq2VCgKeCwLmMkHU4zdVJaSp1hXxj6AxA==",
                            PhoneNumber = "0885763826",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/ddriqreo7/image/upload/v1697607303/projectImages/xbhwflepot9qpwmiiq6u.jpg",
                            RegisteredOn = new DateTime(2025, 1, 17, 10, 22, 4, 134, DateTimeKind.Utc).AddTicks(3000),
                            SecurityStamp = "7784dc11-7f64-40fe-9e0a-2f10be58f188",
                            TwoFactorEnabled = false,
                            UserName = "petar"
                        },
                        new
                        {
                            Id = "93418f37-da3b-4c78-b0ae-8f0022b09681",
                            AccessFailedCount = 0,
                            Address = "ул.Възраждане 6 ет.2 ап.8",
                            BirthDate = new DateTime(1968, 2, 8, 11, 20, 0, 0, DateTimeKind.Unspecified),
                            City = "Казанлък",
                            ConcurrencyStamp = "efcf8418-afd6-4123-a495-07f72a11d41c",
                            Country = "България",
                            Email = "georgidimitrov@abv.bg",
                            EmailConfirmed = false,
                            Gender = "Мъж",
                            IsActive = true,
                            IsApproved = true,
                            LockoutEnabled = false,
                            Name = "Георги Димитров",
                            NormalizedEmail = "GEORGIDIMITROV@ABV.BG",
                            NormalizedUserName = "GEORGI",
                            PasswordHash = "AQAAAAIAAYagAAAAECw5rDYPNlwd/ad+nNcHk7Fq6nwWRqzA5DicQmx+bMUaZHgbw5FPB7LEa89pFcGjvQ==",
                            PhoneNumber = "0885789826",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/ddriqreo7/image/upload/v1697608565/projectImages/mvorrsshjbw1e8bzfzgq.jpg",
                            RegisteredOn = new DateTime(2025, 1, 17, 10, 22, 4, 203, DateTimeKind.Utc).AddTicks(5621),
                            SecurityStamp = "c5d58eb0-5578-487e-9caf-59d01dc2cff2",
                            TwoFactorEnabled = false,
                            UserName = "georgi"
                        },
                        new
                        {
                            Id = "20dcf707-dfd9-4aae-b8c3-f3b9844e09d8",
                            AccessFailedCount = 0,
                            Address = "ул. Незабравка 3",
                            BirthDate = new DateTime(2015, 7, 18, 11, 20, 0, 0, DateTimeKind.Unspecified),
                            City = "Енина",
                            ConcurrencyStamp = "459e9bad-3178-4bdf-92ac-d7fb7652498a",
                            Country = "България",
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            Gender = "Мъж",
                            IsActive = true,
                            IsApproved = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEF1mSFRIh8/J5ezbEV+KdZGyodaC9xRFHu6xAu6FW3P4DngdhHnl/aY0nrJoSdeKBg==",
                            PhoneNumber = "0889864842",
                            PhoneNumberConfirmed = false,
                            ProfilePictureUrl = "https://res.cloudinary.com/ddriqreo7/image/upload/v1697617373/projectImages/pyb6v86l6myou9h1sxca.jpg",
                            RegisteredOn = new DateTime(2025, 1, 17, 10, 22, 4, 305, DateTimeKind.Utc).AddTicks(8505),
                            SecurityStamp = "f8c2ef1f-67b2-4162-bb95-c8f36dfb373a",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "78374b9b-5158-4aff-8626-d088a02d79e1",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "835c8458-e8b7-493f-9c13-67bfcd7316a3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8duisjak-e8o7-8uu5-9c13-543e65731jh3",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "78wijd768-7255-4iwf-9o23-6786yet54wa3",
                            Name = "Giver",
                            NormalizedName = "GIVER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "93418f37-da3b-4c78-b0ae-8f0022b09681",
                            RoleId = "78374b9b-5158-4aff-8626-d088a02d79e1"
                        },
                        new
                        {
                            UserId = "20dcf707-dfd9-4aae-b8c3-f3b9844e09d8",
                            RoleId = "835c8458-e8b7-493f-9c13-67bfcd7316a3"
                        },
                        new
                        {
                            UserId = "080a469a-b5a2-44cc-a660-eea8e6fd05a5",
                            RoleId = "8duisjak-e8o7-8uu5-9c13-543e65731jh3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Activity", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Course", "Course")
                        .WithMany("Activities")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.ActivityStudent", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Activity", "Activity")
                        .WithMany("ActivityStudents")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Student", "Student")
                        .WithMany("ActivitiesStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Course", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Room", "Room")
                        .WithMany("Courses")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.GivenThing", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Giver", "Giver")
                        .WithMany("GivenThings")
                        .HasForeignKey("GiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.MaterialBaseItem", "MaterialBaseItem")
                        .WithMany("GivenThings")
                        .HasForeignKey("MaterialItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Giver");

                    b.Navigation("MaterialBaseItem");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Giver", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Request", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Course", "Course")
                        .WithMany("Requests")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Student", "Student")
                        .WithMany("Requests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Teacher", "Teacher")
                        .WithMany("Requests")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Student", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.SleepingRoom", "SleepingRoom")
                        .WithMany("Students")
                        .HasForeignKey("SleepingRoomId");

                    b.HasOne("InterestsAcademy.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SleepingRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.StudentCourse", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Teacher", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Activity", b =>
                {
                    b.Navigation("ActivityStudents");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Course", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Requests");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Giver", b =>
                {
                    b.Navigation("GivenThings");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.MaterialBaseItem", b =>
                {
                    b.Navigation("GivenThings");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Room", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.SleepingRoom", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Student", b =>
                {
                    b.Navigation("ActivitiesStudents");

                    b.Navigation("Requests");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Teacher", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
