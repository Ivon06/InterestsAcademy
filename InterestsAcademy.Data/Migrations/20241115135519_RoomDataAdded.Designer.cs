// <auto-generated />
using System;
using InterestsAcademy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterestsAcademy.Data.Migrations
{
    [DbContext(typeof(InterestsAcademyDbContext))]
    [Migration("20241115135519_RoomDataAdded")]
    partial class RoomDataAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InterestsAcademy.Data.Models.Activity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("RoomId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.ActivityStudent", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityStudents");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.CourseGiver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GiverId");

                    b.ToTable("CoursesGivers");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.GivenThing", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("GiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GiverId");

                    b.ToTable("GivenThings");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Giver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Givers");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = "7ef9be3e-51ed-4d4e-90a1-9e452fc93b44",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Мултифункционална зала"
                        },
                        new
                        {
                            Id = "a1b65f7d-cda0-4184-a411-cc2343471268",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Музикално студио"
                        },
                        new
                        {
                            Id = "66547a06-fbe9-43dc-af6f-19bfc14a85ab",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство \"Малки изследователи\""
                        },
                        new
                        {
                            Id = "852643ff-939e-4d2d-b27c-58a3e0d6cdd6",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Работилница"
                        },
                        new
                        {
                            Id = "7510347a-676e-4878-a2b1-5236f7ac3e28",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Физкултурен салон"
                        },
                        new
                        {
                            Id = "123ac8bc-7d2f-4a21-93e5-e498b5fdb3f5",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Конферентна зала"
                        },
                        new
                        {
                            Id = "2597bdb5-47ba-4e1f-aa66-e008b8c8c2cc",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Библиотека"
                        },
                        new
                        {
                            Id = "56684c77-0a47-402f-873e-68baf07859c6",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Физика и астрономия"
                        },
                        new
                        {
                            Id = "7fcb7690-22c8-42ca-a69b-fc5567c47f2b",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство \"Роботика и програмиране\""
                        },
                        new
                        {
                            Id = "e7762b5f-5837-43cb-97de-3b99b2029a85",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство за Археология"
                        },
                        new
                        {
                            Id = "d92cd0b5-557b-4551-84e0-31a552f605a1",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Лаборатория"
                        },
                        new
                        {
                            Id = "852d5e5c-bf47-4614-849b-99305b3dbc99",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Младежки клуб по видеозаснемане"
                        },
                        new
                        {
                            Id = "87e9b3c6-a53f-4687-8fb5-83c264556d3c",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Пространство за спорт на открито"
                        },
                        new
                        {
                            Id = "26c53219-c861-4bbf-aa20-8b30e0ec732e",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Еко стая"
                        },
                        new
                        {
                            Id = "f23009a6-eee0-498d-9b49-c8fc126b0df7",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Градина за биоземеделие"
                        },
                        new
                        {
                            Id = "6f411190-24ed-4159-912e-1fdb049dee29",
                            Capacity = 26,
                            Floor = 1,
                            Name = "Дейности извън Академията - ориентиране в планината, конна езда, походи"
                        });
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.RoomGiver", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GiverId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomsGivers");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.SleepingRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CountOfBed")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SleepingRooms");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SleepingRoomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SleepingRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Activity", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Room", "Room")
                        .WithMany("Activities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.ActivityStudent", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Activity", "Activity")
                        .WithMany("ActivityStudents")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Student", "Student")
                        .WithMany("ActivitiesStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Course", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.CourseGiver", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Course", "Course")
                        .WithMany("CourseGivers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Giver", "Giver")
                        .WithMany("CourseGivers")
                        .HasForeignKey("GiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Giver");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.GivenThing", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Giver", "Giver")
                        .WithMany("GivenThings")
                        .HasForeignKey("GiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Giver");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Giver", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.RoomGiver", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.Giver", "Giver")
                        .WithMany("RoomGivers")
                        .HasForeignKey("GiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.Room", "Room")
                        .WithMany("RoomGivers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Giver");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Student", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.SleepingRoom", "SleepingRoom")
                        .WithMany("Students")
                        .HasForeignKey("SleepingRoomId");

                    b.HasOne("InterestsAcademy.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SleepingRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Teacher", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InterestsAcademy.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Activity", b =>
                {
                    b.Navigation("ActivityStudents");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Course", b =>
                {
                    b.Navigation("CourseGivers");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Giver", b =>
                {
                    b.Navigation("CourseGivers");

                    b.Navigation("GivenThings");

                    b.Navigation("RoomGivers");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Room", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("RoomGivers");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.SleepingRoom", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Student", b =>
                {
                    b.Navigation("ActivitiesStudents");
                });

            modelBuilder.Entity("InterestsAcademy.Data.Models.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
